function BattleGetLowHp( chr, per )
{
	local hp = this.Battle.GetParameter(chr, 0);
	local maxhp = this.Battle.GetParameter(chr, 2);

	if (hp <= maxhp * per / 100)
	{
		return true;
	}

	return false;
}

function BattleGetLowSp( chr, per )
{
	local sp = this.Battle.GetParameter(chr, 1);
	local maxsp = this.Battle.GetParameter(chr, 3);

	if (sp <= maxsp * per / 100)
	{
		return true;
	}

	return false;
}

function BattleGetHighHp( chr, per )
{
	local hp = this.Battle.GetParameter(chr, 0);
	local maxhp = this.Battle.GetParameter(chr, 2);

	if (hp >= maxhp * per / 100)
	{
		return true;
	}

	return false;
}

function BattleGetPartyHighHp( per )
{
	local hp1 = this.Battle.GetParameter(0, 0);
	local maxhp1 = this.Battle.GetParameter(0, 2);
	local hp2 = this.Battle.GetParameter(1, 0);
	local maxhp2 = this.Battle.GetParameter(1, 2);
	local hp3 = this.Battle.GetParameter(2, 0);
	local maxhp3 = this.Battle.GetParameter(2, 2);

	if (hp1 + hp2 + hp3 >= (maxhp1 + maxhp2 + maxhp3) * per / 100)
	{
		return true;
	}

	return false;
}

function BattleAliveCharacterCount()
{
	local cnt = 0;

	if (this.Battle.GetParameter(0, 0) >= 1)
	{
		cnt = cnt + 1;
	}

	if (this.Battle.GetParameter(1, 0) >= 1)
	{
		cnt = cnt + 1;
	}

	if (this.Battle.GetParameter(2, 0) >= 1)
	{
		cnt = cnt + 1;
	}

	return cnt;
}

function BattleIsNormalMode()
{
	if (this.Battle.GetDifficulty() == 0)
	{
		return true;
	}

	return false;
}

function BattleIsHardMode()
{
	if (this.Battle.GetDifficulty() == 1)
	{
		return true;
	}

	return false;
}

function BattleIsVeryHardMode()
{
	return false;
}

function Battle_Init_Base()
{
	this.Battle_Init();
}

function Battle_Boot_Base()
{
	this.Battle_Boot();
}

function Battle_Start_Base()
{
	this.Battle_Start();
}

function Battle_Command_Base()
{
	this.Battle_Command();
}

function Battle_Victory_Base()
{
	this.Battle_Victory();
}

function Battle_Defeat_Base()
{
	this.Battle_Defeat();
}

function Battle_Turn_End_Base()
{
	this.Battle_Turn_End();
}

function Battle_Direction_End_Base()
{
	this.Battle_Direction_End();
}

function Battle_Direction_Result_Base()
{
	this.Battle_Direction_Result();
}

function Message( a_message_id )
{
	this.Talk.Message(a_message_id);
	this.WaitMessage();
}

function Message_Center( a_message_id )
{
	this.Talk.Message_C(a_message_id);
	this.WaitMessage();
}

function Message_wait( a_message_id, a_wait )
{
	this.Talk.Message_Auto(a_message_id);
	this.SetWaitMessage(a_wait);
}

function Message_Center_wait( a_message_id, a_wait )
{
	this.Talk.Message_C_Auto(a_message_id);
	this.SetWaitMessage(a_wait);
}

function MessageComic( a_message_id, a_position )
{
	this.Talk.MessageComic(a_message_id, a_position);
	this.WaitMessage();
}

function MessageTalk( a_message_id )
{
	this.Talk.MessageTalk(a_message_id);
	this.WaitMessage();
}

function MessageTalk_wait( a_message_id, a_wait )
{
	this.Talk.MessageTalk_Auto(a_message_id);
	this.SetWaitMessage(a_wait);
}

function MessageSel( a_sel_num, a_message_id )
{
	this.Talk.MessageSel(a_sel_num, a_message_id);
	this.WaitMessage();
	this.Talk.ResultSelectedNum();
}

function MessageTalkSel( a_sel_num, a_message_id )
{
	this.Talk.MessageTalkSel(a_sel_num, a_message_id);
	this.WaitMessage();
	this.Talk.ResultSelectedNum();
}

function TalkCommunication( a_position, a_disp_model, a_animation )
{
	this.Talk.TalkCommunication(a_position, a_disp_model, a_animation);
	this.WaitCommunication();
}

function ShowCommunication( a_animation )
{
	this.Talk.ShowCommunication(a_animation);
	this.Sound.PlaySE("ev_101", false);
	this.WaitCommunication();
}

function YesNoInfo( a_para_id )
{
	this.Window.OpenYesNoInfo(a_para_id);
	this.WaitYesNoInfoWindow();
}

function YesNoSystem( a_para_id )
{
	this.Window.OpenYesNoSystem(a_para_id);
	this.WaitYesNoSystemWindow();
}

function OpenTutorial( a_tutorial_id )
{
	this.Window.OpenTutorial(a_tutorial_id);
	this.WaitTutorialWindow();
	this.Window.CloseTutorial();
	this.WaitCloseTutorialWindow();
}

function OpenCutin()
{
	this.Talk.OpenCutin();
	this.WaitOpenTalkCutin();
}

function WaitMessage()
{
	this.WaitFrame(this.Util.SecondFromFrame(1));

	while (1)
	{
		if (this.Talk.IsNext())
		{
			break;
		}

		this.WaitFrame(this.Util.SecondFromFrame(1));
	}
}

function SetWaitMessage( Wait )
{
	this.Talk.SetWait(Wait);
	this.WaitFrame(this.Util.SecondFromFrame(1));

	while (1)
	{
		if (this.Talk.IsWait())
		{
			break;
		}

		this.WaitFrame(this.Util.SecondFromFrame(1));
	}
}

function WaitCloseTalkWindow()
{
	this.WaitFrame(this.Util.SecondFromFrame(1));

	while (1)
	{
		if (this.Talk.IsClose())
		{
			break;
		}

		this.WaitFrame(this.Util.SecondFromFrame(1));
	}
}

function WaitCommunication()
{
	this.WaitFrame(this.Util.SecondFromFrame(1));

	while (1)
	{
		if (this.Talk.IsOpenTalkCommunication())
		{
			break;
		}

		this.WaitFrame(this.Util.SecondFromFrame(1));
	}
}

function WaitCloseTalkCommunication()
{
	this.WaitFrame(this.Util.SecondFromFrame(1));

	while (1)
	{
		if (this.Talk.IsCommunicationClose())
		{
			break;
		}

		this.WaitFrame(this.Util.SecondFromFrame(1));
	}
}

function WaitOpenTalkCutin()
{
	this.WaitFrame(this.Util.SecondFromFrame(1));

	while (1)
	{
		if (this.Talk.IsOpenCutin())
		{
			break;
		}

		this.WaitFrame(this.Util.SecondFromFrame(1));
	}
}

function WaitCloseTalkCutin()
{
	this.WaitFrame(this.Util.SecondFromFrame(1));

	while (1)
	{
		if (this.Talk.IsCloseCutin())
		{
			break;
		}

		this.WaitFrame(this.Util.SecondFromFrame(1));
	}
}

function WaitEffect( a_effectId )
{
	this.WaitFrame(this.Util.SecondFromFrame(1));

	while (1)
	{
		if (this.Talk.IsEffect(a_effectId))
		{
			break;
		}

		this.WaitFrame(this.Util.SecondFromFrame(1));
	}
}

function WaitInfoWindow()
{
	this.WaitFrame(this.Util.SecondFromFrame(1));

	while (1)
	{
		if (this.Window.IsNextInfo())
		{
			break;
		}

		this.WaitFrame(this.Util.SecondFromFrame(1));
	}
}

function WaitCloseInfoWindow()
{
	this.WaitFrame(this.Util.SecondFromFrame(1));

	while (1)
	{
		if (this.Window.IsEndCloseInfo())
		{
			break;
		}

		this.WaitFrame(this.Util.SecondFromFrame(1));
	}
}

function WaitSystemWindow()
{
	this.WaitFrame(this.Util.SecondFromFrame(1));

	while (1)
	{
		if (this.Window.IsNextSystemWindow())
		{
			break;
		}

		this.WaitFrame(this.Util.SecondFromFrame(1));
	}
}

function WaitCloseSystemWindow()
{
	this.WaitFrame(this.Util.SecondFromFrame(1));

	while (1)
	{
		if (this.Window.IsEndCloseSystemWindow())
		{
			break;
		}

		this.WaitFrame(this.Util.SecondFromFrame(1));
	}
}

function WaitYesNoInfoWindow()
{
	this.WaitFrame(this.Util.SecondFromFrame(1));

	while (1)
	{
		if (this.Window.IsNextYesNoInfo())
		{
			break;
		}

		this.WaitFrame(this.Util.SecondFromFrame(1));
	}
}

function WaitCloseYesNoInfoWindow()
{
	this.WaitFrame(this.Util.SecondFromFrame(1));

	while (1)
	{
		if (this.Window.IsEndCloseYesNoInfo())
		{
			break;
		}

		this.WaitFrame(this.Util.SecondFromFrame(1));
	}
}

function WaitYesNoSystemWindow()
{
	this.WaitFrame(this.Util.SecondFromFrame(1));

	while (1)
	{
		if (this.Window.IsNextYesNoSystem())
		{
			break;
		}

		this.WaitFrame(this.Util.SecondFromFrame(1));
	}
}

function WaitCloseYesNoSystemWindow()
{
	this.WaitFrame(this.Util.SecondFromFrame(1));

	while (1)
	{
		if (this.Window.IsEndCloseYesNoSystem())
		{
			break;
		}

		this.WaitFrame(this.Util.SecondFromFrame(1));
	}
}

function WaitTutorialWindow()
{
	this.WaitFrame(this.Util.SecondFromFrame(1));

	while (1)
	{
		if (this.Window.IsNextTutorial())
		{
			break;
		}

		this.WaitFrame(this.Util.SecondFromFrame(1));
	}
}

function WaitCloseTutorialWindow()
{
	this.WaitFrame(this.Util.SecondFromFrame(1));

	while (1)
	{
		if (this.Window.IsEndCloseTutorial())
		{
			break;
		}

		this.WaitFrame(this.Util.SecondFromFrame(1));
	}
}

function WaitMultiSelectWindow()
{
	this.WaitFrame(this.Util.SecondFromFrame(1));

	while (1)
	{
		if (this.Window.IsNextMultiSelect())
		{
			break;
		}

		this.WaitFrame(this.Util.SecondFromFrame(1));
	}
}

function WaitCloseMultiSelectWindow()
{
	this.WaitFrame(this.Util.SecondFromFrame(1));

	while (1)
	{
		if (this.Window.IsEndCloseMultiSelect())
		{
			break;
		}

		this.WaitFrame(this.Util.SecondFromFrame(1));
	}
}

function WaitCloseMoneyWindow()
{
	this.WaitFrame(this.Util.SecondFromFrame(1));

	while (1)
	{
		if (this.Window.IsEndMoneyWindow())
		{
			break;
		}

		this.WaitFrame(this.Util.SecondFromFrame(1));
	}
}

function MessageClose()
{
	this.Talk.Close();
	this.WaitCloseTalkWindow();
}

function CommunicationClose()
{
	this.Talk.CommunicationClose();
	this.Sound.PlaySE("ev_102", false);
	this.WaitCloseTalkCommunication();
}

function YesNoInfoClose()
{
	this.Window.CloseYesNoInfo();
	this.WaitCloseYesNoInfoWindow();
}

function YesNoSystemClose()
{
	this.Window.CloseYesNoSystem();
	this.WaitCloseYesNoSystemWindow();
}

function CloseCutin()
{
	this.Talk.CloseCutin();
	this.WaitCloseTalkCutin();
}

function WaitTalkLoadModel()
{
	this.WaitFrame(this.Util.SecondFromFrame(1));

	while (1)
	{
		if (this.Talk.IsEndLoadModel())
		{
			break;
		}

		this.WaitFrame(this.Util.SecondFromFrame(1));
	}
}

function WaitTalkLoadEffect()
{
	this.WaitFrame(this.Util.SecondFromFrame(1));

	while (1)
	{
		if (this.Talk.IsEndLoadEffect())
		{
			break;
		}

		this.WaitFrame(this.Util.SecondFromFrame(1));
	}
}

function WaitTalkLoadModelCommunication()
{
	this.WaitFrame(this.Util.SecondFromFrame(1));

	while (1)
	{
		if (this.Talk.IsLoadCommunication())
		{
			break;
		}

		this.WaitFrame(this.Util.SecondFromFrame(1));
	}
}

function WaitTalkLoadCutin()
{
	this.WaitFrame(this.Util.SecondFromFrame(1));

	while (1)
	{
		if (this.Talk.IsEndLoadCutin())
		{
			break;
		}

		this.WaitFrame(this.Util.SecondFromFrame(1));
	}
}

function WaitVistaLoad()
{
	this.WaitFrame(this.Util.SecondFromFrame(1));

	while (1)
	{
		if (this.Vista.IsEndLoad())
		{
			break;
		}

		this.WaitFrame(this.Util.SecondFromFrame(1));
	}
}

function WaitVistaBGMovie()
{
	this.WaitFrame(this.Util.SecondFromFrame(1));

	while (1)
	{
		if (this.Vista.IsReadyBGMovie())
		{
			break;
		}

		this.WaitFrame(this.Util.SecondFromFrame(1));
	}
}

function TalkExit()
{
	this.WaitFrame(this.Util.SecondFromFrame(1));
	this.Talk.Exit();

	while (!this.Talk.IsExit())
	{
		this.WaitFrame(this.Util.SecondFromFrame(1));
	}

	this.Talk.End();
}

function TalkExit2()
{
	this.WaitFrame(this.Util.SecondFromFrame(1));
	this.Talk.Exit();

	while (!this.Talk.IsExit())
	{
		this.Field.CloseUI(false);
		this.WaitFrame(this.Util.SecondFromFrame(1));
	}

	this.Talk.End();
}

function VistaExit()
{
	this.WaitFrame(this.Util.SecondFromFrame(1));
	this.Vista.Exit();

	while (!this.Vista.IsExit())
	{
		this.WaitFrame(this.Util.SecondFromFrame(1));
	}

	this.Vista.End();
}

function MovieIsPlay()
{
	this.WaitFrame(this.Util.SecondFromFrame(1));

	while (1)
	{
		if (!this.Movie.IsPlay())
		{
			break;
		}

		this.WaitFrame(this.Util.SecondFromFrame(1));
	}
}

function FADE_IN( type, time )
{
	this.Fade.In(type, time);

	while (!this.Fade.IsEndType(type))
	{
		this.WaitFrame(this.Util.SecondFromFrame(1));
	}
}

function FADE_OUT( type, time )
{
	this.Fade.Out(type, time);

	while (!this.Fade.IsEndType(type))
	{
		this.WaitFrame(this.Util.SecondFromFrame(1));
	}
}

function INFO_WINDOW( mesNo )
{
	this.Window.OpenInfo(mesNo);
	this.WaitInfoWindow();
	this.Window.CloseInfo();
	this.WaitCloseInfoWindow();
}

function INFO_WINDOW_WITH_CLOSE_MONEY( mesNo )
{
	this.Window.OpenInfo(mesNo);
	this.WaitInfoWindow();
	this.Window.CloseMoneyWindow();
	this.Window.CloseInfo();
	this.WaitCloseInfoWindow();
	this.WaitCloseMoneyWindow();
}

function INFO_GET_ITEM( ItemNo, num )
{
	this.Sound.PlaySE("com_033", false);
	this.Window.OpenInfoGetItem(ItemNo, num);
	this.WaitInfoWindow();
	this.Window.CloseInfo();
	this.WaitCloseInfoWindow();
}

function INFO_DEL_ITEM( ItemNo, num )
{
	this.Window.OpenInfoReleaseItem(ItemNo, num);
	this.WaitInfoWindow();
	this.Window.CloseInfo();
	this.WaitCloseInfoWindow();
}

function SE_PLAY( fileName, type )
{
	this.Sound.PlaySE(fileName, type);

	while (1)
	{
		if (!this.Sound.IsPlaySE(fileName))
		{
			break;
		}

		this.WaitFrame(this.Util.SecondFromFrame(1));
	}
}

function WaitVoicePlay()
{
	this.WaitFrame(this.Util.SecondFromFrame(1));
	local waittime = 10 * 30;

	while (1)
	{
		if (!this.Sound.IsPlaying(2))
		{
			break;
		}

		if (waittime <= 0)
		{
			break;
		}

		this.WaitFrame(this.Util.SecondFromFrame(1));

		if (waittime > 0)
		{
			waittime = waittime - 1;
		}
	}

	this.WaitFrame(this.Util.SecondFromFrame(3));
}

function NPC_MESSAGE( fileName, msgNo )
{
	this.Field.MoveOffPlayer();
	this.Talk.Load(fileName);
	this.Talk.SetMode(1);
	this.Message(msgNo);
	this.MessageClose();
	this.TalkExit();
	this.Field.MoveOnPlayer();
}

function debagMesssage( npcNo )
{
	this.Talk.Load("debug_message");
	this.Talk.SetMode(1);
	this.Talk.Message(npcNo);
	this.WaitMessage();
	this.MessageClose();
	this.TalkExit();
}

function KEYWORD_GET( keyNo )
{
	this.Window.OpenInfoGetKeyword(keyNo);
	this.WaitInfoWindow();
	this.Window.CloseInfo();
	this.WaitCloseInfoWindow();
}

function Battle_Init()
{
    this.Battle.SetBGM("M24", "M26");
}

function Battle_Boot()
{
}

function Battle_Start()
{
}

function Battle_Victory()
{
}

function Battle_Defeat()
{
}

function Battle_Command()
{
}

function Battle_Turn_End()
{
}

function Battle_Direction_End()
{
}

